package uk.co.terminological.rjava.plugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.FileUtils;

public abstract class PluginBase extends AbstractMojo {

	@Component
	protected MavenProject mavenProject;
	@Component
	protected MavenSession mavenSession;
	@Component
	protected BuildPluginManager pluginManager;
	@Parameter(required = true)
	protected PackageData packageData;
	@Parameter(required = true)
	protected File outputDirectory;
	

	private void delete(Path t) {
		try {
			Files.delete(t);
		} catch (IOException e1) {
			getLog().debug("couldn't remove: "+t.toString());
		}
	}

	protected void rmContents(Path dir) throws MojoExecutionException {
		try (Stream<Path> paths = Files.walk(dir)) {
			paths.sorted(Comparator.reverseOrder()).filter(f -> !f.equals(dir)).forEach(this::delete);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot remove files in build directory: "+dir,e1);
		}
	}
	
	protected void rmJar(Path dir, String artifactiId) throws MojoExecutionException {
		try (Stream<Path> paths = Files.walk(dir)) {
			paths
				.sorted(Comparator.reverseOrder()).filter(f -> !f.equals(dir))
				.filter(p -> p.getFileName().toString().startsWith(artifactiId))
				.forEach(this::delete);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot remove files in build directory: "+dir,e1);
		}
	}

	protected static boolean isGenerated(File f) {
		try {
			String contents =  FileUtils.fileRead(f);
			return contents.startsWith("# Generated by r6-generator-maven-plugin") ||
					contents.startsWith("R6GeneratorNote: Generated by r6-generator-maven-plugin") ||
					contents.contains("# But actually generated by r6-generator-maven-plugin");
			
		} catch (IOException e) {
			return false;
		}
	}
	
	protected void rmGenerated(Path dir) throws MojoExecutionException {
		try (Stream<Path> paths = Files.walk(dir)) {
			paths
				.sorted(Comparator.reverseOrder())
				.filter(f -> !f.equals(dir))
				.filter(f -> isGenerated(f.toFile()))
				.forEach(this::delete);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot remove files in build directory: "+dir,e1);
		}
	}

	protected Path rProjectDir;
	protected Path jarDir;
	protected Path rDir;
	protected Path manDir;
	protected Path docs;
	protected Path testDir;
	protected Path workflows;
	protected String jarFile;
	// protected Path jarLoc;
	protected Path pomDir;
	protected String rToPomPath;
	protected String sourcesFile;
	protected String thinJarFile;
	

	public PluginBase() {
		super();
	}

	protected void setupPaths() throws MojoExecutionException {
		rProjectDir = outputDirectory.toPath().normalize();
		jarDir = rProjectDir.resolve("inst").resolve("java").normalize();
		rDir = rProjectDir.resolve("R").normalize();
		manDir = rProjectDir.resolve("man").normalize();
		docs = rProjectDir.resolve("docs").normalize();
		testDir = rProjectDir.resolve("tests/testthat").normalize();
		workflows = rProjectDir.resolve(".github/workflows").normalize();
		
		jarFile = mavenProject.getModel().getBuild().getFinalName()+"-jar-with-dependencies.jar";
		sourcesFile = mavenProject.getModel().getBuild().getFinalName()+"-src.jar";
		thinJarFile = mavenProject.getModel().getBuild().getFinalName()+".jar";
		
		// jarLoc = jarDir.resolve(jarFile);
		pomDir = Paths.get(mavenProject.getBasedir().getPath()).normalize();
		rToPomPath = rProjectDir.relativize(pomDir).toString();
		
		// if( rProjectDir.startsWith(pomDir) && !rProjectDir.equals(pomDir)) {
		if (rToPomPath.startsWith("..")) {
			getLog().warn(
				"The java sources are located outside of the R package. This may make it impossible to compile the sources,"
				+ " and mean the compiled jars must be distributed with the generated java library."
				+ " This will often be too large for CRAN");
			getLog().warn("rootDir: "+rProjectDir);
			getLog().warn("pomDir: "+pomDir);
			getLog().warn("rToPomPath: "+rToPomPath);
		}
		
		
		try {
			Files.createDirectories(jarDir);
			Files.createDirectories(rDir);
			Files.createDirectories(manDir);
			Files.createDirectories(workflows);
			Files.createDirectories(docs);
			Files.createDirectories(testDir);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot create required directories:",e1);
		}
		
	}

	protected List<String> scanDirectoryForExports(Path rDir) throws MojoExecutionException {
		List<String> additionalExports = new ArrayList<>();
		try (Stream<Path> paths = Files.walk(rDir)) {
			paths.filter(f -> !Files.isDirectory(f))
			.forEach(f -> {
				try {
					String s = FileUtils.fileRead(f.toFile());
					Pattern p = Pattern.compile("@export.*?\\n\\s*([a-zA-Z0-9_\\.]+)\\s*=", Pattern.DOTALL);
					Matcher m = p.matcher(s);
					while(m.find()) {
						additionalExports.add(m.group(1));
					}
				} catch (IOException e) {
					// do nothing
				}
			});
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot scan source R files for @export statements:",e1);
		}
		return additionalExports;
	}
	
	protected void deleteJar(String jarFile) {
		Path jarLoc = jarDir.resolve(jarFile);
		try {
			if (Files.exists(jarLoc)) Files.delete(jarLoc);
		} catch (IOException e) {
			getLog().warn("Couldn't delete the jar from: "+jarLoc);
		}
	}
	
	protected void moveJar(String jarFile) throws MojoExecutionException {
		Path jarLoc = jarDir.resolve(jarFile);
		try {
			
			Files.createDirectories(rProjectDir);
			File targetDir = new File(mavenProject.getModel().getBuild().getDirectory());
			Files.copy(
					Paths.get(targetDir.getAbsolutePath(), jarFile), 
					jarLoc, StandardCopyOption.REPLACE_EXISTING);
			
		} catch (IOException e) {
			throw new MojoExecutionException("Couldn't move fat jar",e);
		}
	}

}