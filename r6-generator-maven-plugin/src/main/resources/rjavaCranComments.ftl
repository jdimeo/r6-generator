# Generated by r6-generator-maven-plugin: remove this line and make manual changes when you come to CRAN submission

## Test environments

# N.B. this is only true is you have uncommented the correct lines in github actions workflow files
(via GitHub actions)
 
* os: windows-latest, R: oldrel-1
* os: windows-latest, R: release
* os: windows-latest, R: devel
* os: macOS-latest, R: oldrel-1
* os: macOS-latest, R: release
* os: macOS-latest, R: devel
* os: ubuntu-latest; R: release
* os: ubuntu-latest, R: oldrel-1
* os: ubuntu-latest, R: devel

for each environment the tests are run with both Java 8 and Java 11. 

## R CMD check results
# TODO: insert R CMD check results here before submission


## CRAN notes justifications

* This project contains a Java library.
<#if model.getConfig().preCompileBinary()>
	<#if model.getConfig().packageAllDependencies()>

* All Java library code and its transitive dependencies have already been bundled into a single binary (JAR file) which is part of
the package. This minimises the complexity of getting a java library up and running on a target
system. However bunding java libraries does tend to make the package quite large, and will often exceed the 5Mb CRAN limit. The whole of the JAR file 
will have to be updated and re-installed for every change to the R package, however this is the most stable option with fewest dependencies on the target system.
For certain situations, where dependencies are not publicly available, for example, this is the only option.
	<#else>

* The Java code that is specific to the package has been compiled and is distributed with the package, but not the source code. External dependencies
from public repositories, will be fetched independently during the first use of this package, which is only possible if the java library only uses public dependencies. 
This is managed by Java's standard package management system, Maven, which is itself downloaded automatically. This reduces the need for libraries to be distributed 
with the R package, minimising the footprint of the R package, but downloading and installing the dependencies is a potential point of failure, and may take quite some time on first use of the library. 
This is mitigated as much as possible by using battle tested standard Java tooling for dependency management, which will only download libraries it has not already used.
	</#if>
<#else>

* Only the Java source code is supplied with this distribution, packaged in a JAR file. The Java code must be compiled from the source
which will be performed upon first use of the library, including the transitive resolution and the download of any dependencies needed. All dependencies must be 
publicaly available in canonical Maven repositories. This is the most transparent option in terms of the openness of the source code of this R package. 
However, the build process may be relatively time consuming and a potential point of failure. This is mitigated as much as possible by using battle tested
standard Java tooling for compilation and dependency management. This strategy should have a relatively small footprint for the R package, and minimise the
size required for distribution. 
</#if>

* The R6 package is a build time dependency. The note that it is unused can be safely ignored.

* This is a new release.
