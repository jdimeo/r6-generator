# Generated by r6-generator-maven-plugin: do not edit by hand
# This is a collection of the static methods described in the Java API
# and serves as an alternative R centric entry point of the ${model.getConfig().getPackageName()} generated R library.

# Version: ${model.getConfig().getVersion()}
# Generated: ${model.getConfig().getDate()}
# Contact: ${model.getConfig().getMaintainerEmail()}

<#list model.getClassTypes() as class>
# ${class.getSimpleName()} class static methods ----

	<#list class.getStaticMethods() as method>

${method.doxygen(method.getName(),0)}:
#' 
${method.doxygen(method.getDescription(),0)}
		<#list method.getParameterNames() as param>
${method.doxygen("param",method.getParameterDescription(param),0)} - (java expects a ${method.getParameterType(param).getSimpleName()})
		</#list>
		<#if method.isFactory()>
#' @return R6 ${method.getReturnType().getSimpleName()} object: 
${method.doxygen(method.getAnnotationValue("return"),0)!}
		<#else>
#' @return ${method.getReturnType().getSimpleName()}: 
${method.doxygen(method.getAnnotationValue("return"),0)!}
		</#if>
		<#if method.hasExamples()>
#' @examples
			<#list method.getAnnotationList("examples") as example>
${method.doxygen(example,0)}
			</#list>
		</#if>
#' @export
${method.getSnakeCaseName()} = function(${method.getFunctionParameterCsv()}) {
	# get the API singleton
	J = JavaApi$get()
	# execute the R6 function call with the same parameters
	out = J$${class.getSimpleName()}$${method.getName()}(${method.getParameterCsv()})
	if(is.null(out)) return(invisible(out))
	return(out)
}

	</#list>

</#list>



