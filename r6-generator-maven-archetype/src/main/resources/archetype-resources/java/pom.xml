<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
#set( $D = '$' )
	
	<!-- This parent stanza can be deleted along with the pom.xml file in the root of the project -->
	<parent>
		<groupId>${groupId}</groupId>
		<artifactId>${artifactId}-parent</artifactId>
		<version>${version}</version>
	</parent>
	
	
	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<version>${version}</version>
	<packaging>jar</packaging>

	<!-- Enter a name here -->
	<name>${artifactId}</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<r6.version>${archetypeVersion}</r6.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>io.github.terminological</groupId>
			<artifactId>r6-generator-runtime</artifactId>
			<version>${D}{r6.version}</version>
		</dependency>
		<!-- the r6-generator-runtime includes necessary dependencies on slf4j and log4j -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

#if( $archetypeVersion.endsWith("SNAPSHOT") )
	<!-- Resolve runtime library snapshots on Sonatype OSSRH if using snapshots of the r6-generator -->
	<repositories>
		<repository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
	</repositories>

	<!-- Resolve maven plugin snapshots on Sonatype OSSRH if using snapshots of the r6-generator -->
	<pluginRepositories>
		<pluginRepository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</pluginRepository>
	</pluginRepositories>

#end
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${D}{maven.compiler.source}</source>
					<target>${D}{maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.github.terminological</groupId>
				<artifactId>r6-generator-maven-plugin</artifactId>
				<version>${D}{r6.version}</version>
				<configuration>
					<packageData>
						<!-- R library metadata: -->
						<title>${rPackageName}: R6 Java wrapper package</title>
						<version>${rPackageVersion}</version>
						<packageName>${rPackageName}</packageName>
						<license>${rPackageLicense}</license>
						<!-- <url>ENTER URL</url> -->
						<!-- <doi>ENTER DOI</doi> -->
						<description>
							An R6 package wrapping java code in the ${groupId}:${artifactId} library.
							This library was generated by the r6-generator-maven-plugin.
						</description>
						<maintainerName>${maintainerName}</maintainerName>
						<maintainerFamilyName>${maintainerSurname}</maintainerFamilyName>
						<maintainerEmail>${maintainerEmail}</maintainerEmail>
						<maintainerOrganisation>${maintainerOrganisation}</maintainerOrganisation>
						<!-- Build configuration options: -->
						<debug>false</debug> <!-- starts the R library with java code in debugging mode -->
						<rjavaOpts>
							<rjavaOpt>-Xmx256M</rjavaOpt> <!--  this example sets the maximum heap size -->
						</rjavaOpts>
						<!-- The following 2 options requires a working R version on the system that generates the R package -->
						<usePkgdown>true</usePkgdown> <!-- Pkgdown will generate a nice looking site and run all the vignettes on build -->
						<useRoxygen2>false</useRoxygen2> <!-- Roxygen can integrate user supplied and generated R code -->
						<useJavadoc>false</useJavadoc> <!-- building the javadocs into the documentation is nice but can add a lot to size of the package -->
#if( $libraryStyle == "compile-source" )
						<!-- distribute java as source code to be compiled and dependencies linked on first use -->
						<!-- may be time consuming on first use -->
						<preCompileBinary>false</preCompileBinary>
#elseif( $libraryStyle == "thin-jar" )
						<!-- distribute java as thin jar. dependencies linked on first use -->
						<!-- minimises R package footprint but requires download on first use -->
						<preCompileBinary>true</preCompileBinary>
						<packageAllDependencies>false</packageAllDependencies>
						
#else
						<!-- distribute java as fat jar. all dependencies pre-linked and embedded in distribution -->
						<!-- packaging all dependencies is the most robust but results in a large package size -->
						<preCompileBinary>true</preCompileBinary>
						<packageAllDependencies>true</packageAllDependencies>
						<!-- make the jar file smaller by using the shade plugin --> 
						<useShadePlugin>false</useShadePlugin> 
#end
					</packageData>
					<outputDirectory>${D}{project.basedir}/..</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<id>clean-r-library</id>
						<goals>
							<goal>clean-r-library</goal>
						</goals>
					</execution>
					<!-- This execution flattens the pom.xml to remove unnecessary dependencies -->
					<execution>
						<id>flatten-pom</id>
						<goals>
							<goal>flatten-pom</goal>
						</goals>
					</execution>
					<!-- This execution generates the supporting r code -->
					<execution>
						<id>generate-r-library</id>
						<goals>
							<goal>generate-r-library</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
